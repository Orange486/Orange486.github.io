{"meta":{"title":"Orange","subtitle":null,"description":null,"author":"Orange","url":"https://orange486.com"},"pages":[{"title":"Me","date":"2019-08-31T09:57:35.000Z","updated":"2019-09-01T04:38:13.182Z","comments":true,"path":"about/index.html","permalink":"https://orange486.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"==与equals的区别","slug":"笔记二，==与equals区别","date":"2019-09-03T12:57:10.000Z","updated":"2019-09-04T06:30:25.662Z","comments":true,"path":"2019/09/03/笔记二，==与equals区别/","link":"","permalink":"https://orange486.com/2019/09/03/笔记二，==与equals区别/","excerpt":"","text":"==比较的是内存地址，因为基本数据类型没有方法，所以在比较基本数据类型的时候，使用==进行比较，由于栈内容的特点（①），只要基本数据类型的值一样那么他们的地址就相同。equals方法是Object类的方法，底层的实现源码也是==方法。如果没有重写equals方法（②），比较的还是两个对象的地址。只有你重写了该引用数据类型的equals方法才会按照你的方式比较。例如String类，String类已经重写了equals方法，按照字符串的内容进行比较，内容相等即两个对象相等。 ①：栈：保存所有运行时的方法，所有的基本数据类型的数据和变量，以及引用数据类型的变量。 特点：（1）先进后出 （2）当方法执行完之后所有的局部变量都会被回收。运行速度快。 （3）int a = 3 ; 在栈中定义变量放进去，然后去栈中寻找10，如果有，a指向它，如果没有在顶上开辟 一个地址存放10，让a指向它。 ②：在Java中如果认为两个对象相等，那么hashcode值也相等，因此重写equals方法时，也要重写hashCode方 法。注：如果两个对象的hashcode值相等，equals方法不一定相等（hashcode值计算方法会有差异）。 equals方法相等，hashcode值一定相等。","categories":[],"tags":[],"keywords":[]},{"title":"笔记一，String转换数组","slug":"笔记一，String转换数组","date":"2019-09-03T11:09:20.000Z","updated":"2019-09-03T11:15:37.863Z","comments":true,"path":"2019/09/03/笔记一，String转换数组/","link":"","permalink":"https://orange486.com/2019/09/03/笔记一，String转换数组/","excerpt":"","text":"String与byte数组的转换123456byte[] b = &#123; 78, 56, 67 &#125;;String str = new String(b, 0, b.length);String str = \"cxk会ctrl\";byte[] b = str.getBytes();System.out.println(Arrays.toString(b)); String与char数组的转换123456char[] ch = &#123; 'c', 'x', 'k' &#125;;String str = new String(ch, 0, ch.length); String str = \"cxk会ctrl\";char[] b = str.toCharArray();System.out.println(Arrays.toString(b)); String与int数组的转换1234567891011121314151617int[] in = &#123; 23, 45, 96, 7, &#125;;StringBuffer sb = new StringBuffer();for (int i = 0; i &lt; in.length; i++) &#123; sb.append(in[i]);//sb.append(in[i]+\";\");也可以在每个数字之间加个分隔符&#125; String str = \"6921168509256\";int[] arr = new int[str.length()];for (int i = 0; i &lt; str.length(); i++) &#123; // 因为字符串有可能有非数字元素，要处理异常 // substring进行字符串截取 try &#123; arr[i] = Integer.parseInt(str.substring(i, i + 1)); &#125; catch (NumberFormatException e) &#123; e.printStackTrace(); &#125;&#125;","categories":[],"tags":[],"keywords":[]},{"title":"我的第一篇测试文章","slug":"我的第一篇测试文章","date":"2019-08-31T07:11:59.000Z","updated":"2019-08-31T07:18:50.361Z","comments":true,"path":"2019/08/31/我的第一篇测试文章/","link":"","permalink":"https://orange486.com/2019/08/31/我的第一篇测试文章/","excerpt":"","text":"2019年，8月，31日，下午3点钟，晴。这是个值得记录的日子，我的第一篇文章发布，就是这个。（虽然很简陋）","categories":[],"tags":[],"keywords":[]}]}